import { JwtService } from '@nestjs/jwt';
import { AvatarsService } from '../avatars/avatars.service';
import { HashTagEntity } from '../entities/hash-tag.entity';
import { HashTagsService } from '../hash-tags/hash-tags.service';
import { RolesService } from '../roles/roles.service';
import { UserEntity } from '../entities/user.entity';
import { Repository } from 'typeorm';
import { CreateUserDto } from './dto/create.dto';
import { AddQuestionDto } from './dto/add-question.dto';
import { AddAnswerDto } from './dto/add-answer.dto';
import { SetUserDetailedInfoDto } from './dto/set-detailed-info.dto';
import { GetPaginatedDto } from './dto/GetPaginated.dto';
export declare class UsersService {
    private readonly userRepository;
    private readonly rolesService;
    private readonly hashTagsService;
    private readonly imagesService;
    private readonly jwtService;
    constructor(userRepository: Repository<UserEntity>, rolesService: RolesService, hashTagsService: HashTagsService, imagesService: AvatarsService, jwtService: JwtService);
    save(user: Partial<UserEntity>): Promise<Partial<UserEntity> & UserEntity>;
    create(dto: CreateUserDto): Promise<{
        name: string;
        id: number;
        createdAt: Date;
        updatedAt: Date;
        gender: string;
        favoriteHashTags: HashTagEntity[];
        email: string;
        occasion: string;
        birthdate: string;
        passwordHash: string;
        roles: import("../entities/role.entity").RoleEntity[];
        questions: import("../entities/question.entity").QuestionEntity[];
        answers: import("../entities/answer.entity").AnswerEntity[];
        numberOfAnswers: number;
        numberOfQuestions: number;
        rating: number;
        location: string;
        avatar: import("../entities/avatar.entity").AvatarEntity;
        isDeleted: boolean;
        about: string;
        createdHashTags: HashTagEntity[];
        questionTemplates: import("../entities/question-template.entity").QuestionTemplateEntity[];
        ratedUpQuestions: import("../entities/question.entity").QuestionEntity[];
        ratedDownQuestions: import("../entities/question.entity").QuestionEntity[];
        viewedQuestions: import("../entities/question.entity").QuestionEntity[];
        ratedUpAnswers: import("../entities/answer.entity").AnswerEntity[];
        ratedDownAnswers: import("../entities/answer.entity").AnswerEntity[];
        subscribedQuestions: import("../entities/question.entity").QuestionEntity[];
        notSeenAnswers: import("../entities/answer.entity").AnswerEntity[];
        correctAnswersOnSubscribedQuestions: import("../entities/answer.entity").AnswerEntity[];
    } & UserEntity>;
    setDetailedInfo(dto: SetUserDetailedInfoDto): Promise<{
        user: {
            name: string;
            favoriteHashTags: HashTagEntity[];
            gender: string;
            avatar: import("../entities/avatar.entity").AvatarEntity;
            occasion: string;
            birthdate: string;
            id: number;
            createdAt: Date;
            updatedAt: Date;
            email: string;
            passwordHash: string;
            roles: import("../entities/role.entity").RoleEntity[];
            questions: import("../entities/question.entity").QuestionEntity[];
            answers: import("../entities/answer.entity").AnswerEntity[];
            numberOfAnswers: number;
            numberOfQuestions: number;
            rating: number;
            location: string;
            isDeleted: boolean;
            about: string;
            createdHashTags: HashTagEntity[];
            questionTemplates: import("../entities/question-template.entity").QuestionTemplateEntity[];
            ratedUpQuestions: import("../entities/question.entity").QuestionEntity[];
            ratedDownQuestions: import("../entities/question.entity").QuestionEntity[];
            viewedQuestions: import("../entities/question.entity").QuestionEntity[];
            ratedUpAnswers: import("../entities/answer.entity").AnswerEntity[];
            ratedDownAnswers: import("../entities/answer.entity").AnswerEntity[];
            subscribedQuestions: import("../entities/question.entity").QuestionEntity[];
            notSeenAnswers: import("../entities/answer.entity").AnswerEntity[];
            correctAnswersOnSubscribedQuestions: import("../entities/answer.entity").AnswerEntity[];
        } & UserEntity;
        token: string;
    }>;
    getById(id: number): Promise<UserEntity>;
    getByIdWithRatedUpQuestions(id: number): Promise<UserEntity>;
    getByIdWithRatedDownQuestions(id: number): Promise<UserEntity>;
    getByIdWithRatedUpAnswers(id: number): Promise<UserEntity>;
    getByIdWithRatedDownAnswers(id: number): Promise<UserEntity>;
    getByIdWithRatedUpDownAnswers(id: number): Promise<UserEntity>;
    getByIdWithRatedUpDownQuestions(id: number): Promise<UserEntity>;
    getByIdWithCreatedHashTags(id: number): Promise<{
        id: number;
        createdAt: Date;
        updatedAt: Date;
        name: string;
        gender: string;
        favoriteHashTags: HashTagEntity[];
        email: string;
        occasion: string;
        birthdate: string;
        roles: import("../entities/role.entity").RoleEntity[];
        questions: import("../entities/question.entity").QuestionEntity[];
        answers: import("../entities/answer.entity").AnswerEntity[];
        numberOfAnswers: number;
        numberOfQuestions: number;
        rating: number;
        location: string;
        avatar: import("../entities/avatar.entity").AvatarEntity;
        isDeleted: boolean;
        about: string;
        createdHashTags: HashTagEntity[];
        questionTemplates: import("../entities/question-template.entity").QuestionTemplateEntity[];
        ratedUpQuestions: import("../entities/question.entity").QuestionEntity[];
        ratedDownQuestions: import("../entities/question.entity").QuestionEntity[];
        viewedQuestions: import("../entities/question.entity").QuestionEntity[];
        ratedUpAnswers: import("../entities/answer.entity").AnswerEntity[];
        ratedDownAnswers: import("../entities/answer.entity").AnswerEntity[];
        subscribedQuestions: import("../entities/question.entity").QuestionEntity[];
        notSeenAnswers: import("../entities/answer.entity").AnswerEntity[];
        correctAnswersOnSubscribedQuestions: import("../entities/answer.entity").AnswerEntity[];
    }>;
    getWithSubscribedQuestions(id: number): Promise<UserEntity>;
    addQuestion(dto: AddQuestionDto): Promise<{
        questions: import("../entities/question.entity").QuestionEntity[];
        id: number;
        createdAt: Date;
        updatedAt: Date;
        name: string;
        gender: string;
        favoriteHashTags: HashTagEntity[];
        email: string;
        occasion: string;
        birthdate: string;
        passwordHash: string;
        roles: import("../entities/role.entity").RoleEntity[];
        answers: import("../entities/answer.entity").AnswerEntity[];
        numberOfAnswers: number;
        numberOfQuestions: number;
        rating: number;
        location: string;
        avatar: import("../entities/avatar.entity").AvatarEntity;
        isDeleted: boolean;
        about: string;
        createdHashTags: HashTagEntity[];
        questionTemplates: import("../entities/question-template.entity").QuestionTemplateEntity[];
        ratedUpQuestions: import("../entities/question.entity").QuestionEntity[];
        ratedDownQuestions: import("../entities/question.entity").QuestionEntity[];
        viewedQuestions: import("../entities/question.entity").QuestionEntity[];
        ratedUpAnswers: import("../entities/answer.entity").AnswerEntity[];
        ratedDownAnswers: import("../entities/answer.entity").AnswerEntity[];
        subscribedQuestions: import("../entities/question.entity").QuestionEntity[];
        notSeenAnswers: import("../entities/answer.entity").AnswerEntity[];
        correctAnswersOnSubscribedQuestions: import("../entities/answer.entity").AnswerEntity[];
    } & UserEntity>;
    addAnswer(dto: AddAnswerDto): Promise<{
        answers: import("../entities/answer.entity").AnswerEntity[];
        numberOfAnswers: number;
        notSeenAnswers: import("../entities/answer.entity").AnswerEntity[];
        id: number;
        createdAt: Date;
        updatedAt: Date;
        name: string;
        gender: string;
        favoriteHashTags: HashTagEntity[];
        email: string;
        occasion: string;
        birthdate: string;
        passwordHash: string;
        roles: import("../entities/role.entity").RoleEntity[];
        questions: import("../entities/question.entity").QuestionEntity[];
        numberOfQuestions: number;
        rating: number;
        location: string;
        avatar: import("../entities/avatar.entity").AvatarEntity;
        isDeleted: boolean;
        about: string;
        createdHashTags: HashTagEntity[];
        questionTemplates: import("../entities/question-template.entity").QuestionTemplateEntity[];
        ratedUpQuestions: import("../entities/question.entity").QuestionEntity[];
        ratedDownQuestions: import("../entities/question.entity").QuestionEntity[];
        viewedQuestions: import("../entities/question.entity").QuestionEntity[];
        ratedUpAnswers: import("../entities/answer.entity").AnswerEntity[];
        ratedDownAnswers: import("../entities/answer.entity").AnswerEntity[];
        subscribedQuestions: import("../entities/question.entity").QuestionEntity[];
        correctAnswersOnSubscribedQuestions: import("../entities/answer.entity").AnswerEntity[];
    } & UserEntity>;
    getByEmail(email: string): Promise<UserEntity>;
    generateToken(userData: UserEntity): string;
    getAllPaginate(dto: GetPaginatedDto): Promise<{
        users: UserEntity[];
        total: number;
    }>;
    edit(dto: SetUserDetailedInfoDto): Promise<{
        user: {
            name: string;
            favoriteHashTags: HashTagEntity[];
            gender: string;
            avatar: import("../entities/avatar.entity").AvatarEntity;
            occasion: string;
            birthdate: string;
            location: string;
            about: string;
            id: number;
            createdAt: Date;
            updatedAt: Date;
            email: string;
            roles: import("../entities/role.entity").RoleEntity[];
            questions: import("../entities/question.entity").QuestionEntity[];
            answers: import("../entities/answer.entity").AnswerEntity[];
            numberOfAnswers: number;
            numberOfQuestions: number;
            rating: number;
            isDeleted: boolean;
            createdHashTags: HashTagEntity[];
            questionTemplates: import("../entities/question-template.entity").QuestionTemplateEntity[];
            ratedUpQuestions: import("../entities/question.entity").QuestionEntity[];
            ratedDownQuestions: import("../entities/question.entity").QuestionEntity[];
            viewedQuestions: import("../entities/question.entity").QuestionEntity[];
            ratedUpAnswers: import("../entities/answer.entity").AnswerEntity[];
            ratedDownAnswers: import("../entities/answer.entity").AnswerEntity[];
            subscribedQuestions: import("../entities/question.entity").QuestionEntity[];
            notSeenAnswers: import("../entities/answer.entity").AnswerEntity[];
            correctAnswersOnSubscribedQuestions: import("../entities/answer.entity").AnswerEntity[];
        };
        token: string;
    }>;
    softDelete(id: any): Promise<{
        isDeleted: true;
        id: number;
        createdAt: Date;
        updatedAt: Date;
        name: string;
        gender: string;
        favoriteHashTags: HashTagEntity[];
        email: string;
        occasion: string;
        birthdate: string;
        passwordHash: string;
        roles: import("../entities/role.entity").RoleEntity[];
        questions: import("../entities/question.entity").QuestionEntity[];
        answers: import("../entities/answer.entity").AnswerEntity[];
        numberOfAnswers: number;
        numberOfQuestions: number;
        rating: number;
        location: string;
        avatar: import("../entities/avatar.entity").AvatarEntity;
        about: string;
        createdHashTags: HashTagEntity[];
        questionTemplates: import("../entities/question-template.entity").QuestionTemplateEntity[];
        ratedUpQuestions: import("../entities/question.entity").QuestionEntity[];
        ratedDownQuestions: import("../entities/question.entity").QuestionEntity[];
        viewedQuestions: import("../entities/question.entity").QuestionEntity[];
        ratedUpAnswers: import("../entities/answer.entity").AnswerEntity[];
        ratedDownAnswers: import("../entities/answer.entity").AnswerEntity[];
        subscribedQuestions: import("../entities/question.entity").QuestionEntity[];
        notSeenAnswers: import("../entities/answer.entity").AnswerEntity[];
        correctAnswersOnSubscribedQuestions: import("../entities/answer.entity").AnswerEntity[];
    } & UserEntity>;
    upQuestionNumber(id: number): Promise<{
        numberOfQuestions: number;
        id: number;
        createdAt: Date;
        updatedAt: Date;
        name: string;
        gender: string;
        favoriteHashTags: HashTagEntity[];
        email: string;
        occasion: string;
        birthdate: string;
        passwordHash: string;
        roles: import("../entities/role.entity").RoleEntity[];
        questions: import("../entities/question.entity").QuestionEntity[];
        answers: import("../entities/answer.entity").AnswerEntity[];
        numberOfAnswers: number;
        rating: number;
        location: string;
        avatar: import("../entities/avatar.entity").AvatarEntity;
        isDeleted: boolean;
        about: string;
        createdHashTags: HashTagEntity[];
        questionTemplates: import("../entities/question-template.entity").QuestionTemplateEntity[];
        ratedUpQuestions: import("../entities/question.entity").QuestionEntity[];
        ratedDownQuestions: import("../entities/question.entity").QuestionEntity[];
        viewedQuestions: import("../entities/question.entity").QuestionEntity[];
        ratedUpAnswers: import("../entities/answer.entity").AnswerEntity[];
        ratedDownAnswers: import("../entities/answer.entity").AnswerEntity[];
        subscribedQuestions: import("../entities/question.entity").QuestionEntity[];
        notSeenAnswers: import("../entities/answer.entity").AnswerEntity[];
        correctAnswersOnSubscribedQuestions: import("../entities/answer.entity").AnswerEntity[];
    } & UserEntity>;
    addToCreatedHashTags(userId: number, hashTag: HashTagEntity): Promise<{
        createdHashTags: HashTagEntity[];
        id: number;
        createdAt: Date;
        updatedAt: Date;
        name: string;
        gender: string;
        favoriteHashTags: HashTagEntity[];
        email: string;
        occasion: string;
        birthdate: string;
        passwordHash: string;
        roles: import("../entities/role.entity").RoleEntity[];
        questions: import("../entities/question.entity").QuestionEntity[];
        answers: import("../entities/answer.entity").AnswerEntity[];
        numberOfAnswers: number;
        numberOfQuestions: number;
        rating: number;
        location: string;
        avatar: import("../entities/avatar.entity").AvatarEntity;
        isDeleted: boolean;
        about: string;
        questionTemplates: import("../entities/question-template.entity").QuestionTemplateEntity[];
        ratedUpQuestions: import("../entities/question.entity").QuestionEntity[];
        ratedDownQuestions: import("../entities/question.entity").QuestionEntity[];
        viewedQuestions: import("../entities/question.entity").QuestionEntity[];
        ratedUpAnswers: import("../entities/answer.entity").AnswerEntity[];
        ratedDownAnswers: import("../entities/answer.entity").AnswerEntity[];
        subscribedQuestions: import("../entities/question.entity").QuestionEntity[];
        notSeenAnswers: import("../entities/answer.entity").AnswerEntity[];
        correctAnswersOnSubscribedQuestions: import("../entities/answer.entity").AnswerEntity[];
    } & UserEntity>;
    getWithViewedQuestions(id: number): Promise<UserEntity>;
    getNotSeenAnswers(id: number): Promise<UserEntity>;
    getCorrectAnswers(id: number): Promise<UserEntity>;
    getFavoriteHashTags(id: number): Promise<UserEntity>;
    removeFavoriteHashTag(dto: {
        userId: number;
        hashTagId: number;
    }): Promise<{
        favoriteHashTags: HashTagEntity[];
        id: number;
        createdAt: Date;
        updatedAt: Date;
        name: string;
        gender: string;
        email: string;
        occasion: string;
        birthdate: string;
        passwordHash: string;
        roles: import("../entities/role.entity").RoleEntity[];
        questions: import("../entities/question.entity").QuestionEntity[];
        answers: import("../entities/answer.entity").AnswerEntity[];
        numberOfAnswers: number;
        numberOfQuestions: number;
        rating: number;
        location: string;
        avatar: import("../entities/avatar.entity").AvatarEntity;
        isDeleted: boolean;
        about: string;
        createdHashTags: HashTagEntity[];
        questionTemplates: import("../entities/question-template.entity").QuestionTemplateEntity[];
        ratedUpQuestions: import("../entities/question.entity").QuestionEntity[];
        ratedDownQuestions: import("../entities/question.entity").QuestionEntity[];
        viewedQuestions: import("../entities/question.entity").QuestionEntity[];
        ratedUpAnswers: import("../entities/answer.entity").AnswerEntity[];
        ratedDownAnswers: import("../entities/answer.entity").AnswerEntity[];
        subscribedQuestions: import("../entities/question.entity").QuestionEntity[];
        notSeenAnswers: import("../entities/answer.entity").AnswerEntity[];
        correctAnswersOnSubscribedQuestions: import("../entities/answer.entity").AnswerEntity[];
    } & UserEntity>;
    addToFavoriteHashTag(dto: {
        userId: number;
        hashTagId: number;
    }): Promise<{
        favoriteHashTags: HashTagEntity[];
        id: number;
        createdAt: Date;
        updatedAt: Date;
        name: string;
        gender: string;
        email: string;
        occasion: string;
        birthdate: string;
        passwordHash: string;
        roles: import("../entities/role.entity").RoleEntity[];
        questions: import("../entities/question.entity").QuestionEntity[];
        answers: import("../entities/answer.entity").AnswerEntity[];
        numberOfAnswers: number;
        numberOfQuestions: number;
        rating: number;
        location: string;
        avatar: import("../entities/avatar.entity").AvatarEntity;
        isDeleted: boolean;
        about: string;
        createdHashTags: HashTagEntity[];
        questionTemplates: import("../entities/question-template.entity").QuestionTemplateEntity[];
        ratedUpQuestions: import("../entities/question.entity").QuestionEntity[];
        ratedDownQuestions: import("../entities/question.entity").QuestionEntity[];
        viewedQuestions: import("../entities/question.entity").QuestionEntity[];
        ratedUpAnswers: import("../entities/answer.entity").AnswerEntity[];
        ratedDownAnswers: import("../entities/answer.entity").AnswerEntity[];
        subscribedQuestions: import("../entities/question.entity").QuestionEntity[];
        notSeenAnswers: import("../entities/answer.entity").AnswerEntity[];
        correctAnswersOnSubscribedQuestions: import("../entities/answer.entity").AnswerEntity[];
    } & UserEntity>;
}
